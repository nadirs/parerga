title: Functional training
date: 25 Oct. 2012
tags: code, sicp, functional, scheme


A while ago I had the chance to incept some aspects of functional programming into the C# code I was writing (mostly passing around functions as [first class citizens](http://en.wikipedia.org/wiki/First-class_citizen)).

I did read about pure functional programming before, although not much.

I basically found out something called [Lisp](http://en.wikipedia.org/wiki/Lisp_(programming_language)). It later turned out to be a family of functional languages, whose roots date back to the 50s.
Considering the thin background knowledge I had of the matter, the real-world experience (although an hybrid one) made me want to learn more.

## The book
If I think about it, it appears the most natural thing that the source I soon ended up to was [SICP](http://mitpress.mit.edu/sicp/full-text/book/book.html).

_Structure and Interpretation of Computer Programs_ is the textbook used in the introductory course of Computer Science at Massachussets Institute of Technology. Since 1984.

Its cover doesn't exactly suggest its content is about computer science (it's not [really](http://shop.oreilly.com/category/browse-subjects/programming.do) an exception, though).

![centerimg](http://mitpress.mit.edu/sicp/full-text/book/cover.jpg)

### It's a kind of magic
What we commonly refer to as a science is in fact rather some kind of magic
that happens, beyond our will and understanding. And it's not even so much
related to computer as the name implies.
This is, more or less, what co-author Harold Abelson says in the [first lecture](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-001-structure-and-interpretation-of-computer-programs-spring-2005/video-lectures/1a-overview-and-introduction-to-lisp/) of the course, and although
noticeably tongue-in-cheek I agree with the subtle _je ne sais quoi_ that functional programming brings in.

Anyway, I didn't mean to start rambling about MIT history.

I'm willing to start a self-training in functional programming and reasoning,
with the aid of the book (and after a certain inspiring
[precedent](http://eli.thegreenplace.net/category/programming/lisp/sicp/)).

## Tools
My language of choice will be [Racket](http://racket-lang.org/) (which was
once known as [PLT
Scheme](http://plt-scheme.org/)), although I have a feeling that for the first
times Python will come to rescue this novice, helping figuring out how to delve into
a valid mindset for the exercises.

For the moment I've got my feet wet attempting the solution of the first three
exercises. Skipping the first two, which are basically just math to solve, let's have a
look at the third one.

> **Exercise 1.3** _Define a procedure that takes three numbers as arguments and returns the sum of the squares of the two larger numbers._

I stumbled a bit upon this, because I wasn't seeing a solution without side effects. At first, I tried to solve it the procedural way, so I wrote some quick and dirty code in Python:

    :::python
    def sum_of_squares(args):
        return sum(map(lambda x: x*x, args))

    def ex1_3(a, b, c):
        """Define a procedure that takes three numbers as arguments and returns
        the sum of the squares of the two larger numbers.
        """
        smallest = args[0]
        for arg in (b, c):
            if arg < smallest:
                smallest = arg
        args.remove(smallest)
        return sum_of_squares(args)

Then I tried a less language-dependent solution:

    :::python
    def ex1_3_scheme(a, b, c):
        args = []
        if a >= b:
            args.append(a)
            if b >= c:
                args.append(b)
            else:
                args.append(c)
        elif a >= c:
            args = [a, b]
        else:
            args = [b, c]

        return sum_of_squares(args)

And finally wrote a Scheme implementation (this is not the first draft):

    :::scheme
    (define (square x) (* x x))

    (define (sum-squares a b)
      (+ (square a) (square b)))

    (define (sum-squares-of-two-largest-among-three a b c)
      (cond ((>= a b)
             (sum-squares a (if (>= b c) b c)))
            ((>= a c)
             (sum-squares a b))
            (else (sum-squares b c))))

I removed the list use and took advantage (sort of) of the functional paradigm's substition model (conditional substition done this way kind of reminds me the ternary operator in languages like C, although to the nth degree).

## Last thoughts
Despite my attempt to fit in the paradigm, the end result is still somewhat clunky, and at least not very idiomatic.

I might get a better approach to the problem a little way down the road. These Lisp languages should be [quite nice](http://xkcd.com/224/).
